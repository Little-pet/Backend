name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 빌드
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test
        shell: bash

      # 5. DockerHub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 로그인 확인
      - name: Verify Docker Login
        run: |
          docker info | grep Username || exit 1

      # 6. Docker Buildx 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.1

      # 7. Docker 이미지 빌드 및 푸시
      - name: Docker Image Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/littlepetdocker:latest
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # DockerHub 로그인
            echo "${{ secrets.DOCKER_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Docker 네트워크 생성 (존재하지 않으면 생성)
            if [ -z "$(sudo docker network ls --filter name=${{ secrets.DOCKER_NETWORK }} -q)" ]; then
              sudo docker network create ${{ secrets.DOCKER_NETWORK }}
            fi

            # Spring Boot 컨테이너 업데이트
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/littlepetdocker:latest
            EXISTING_CONTAINER=$(sudo docker ps -q --filter "name=littlepet-container")
            if [ ! -z "$EXISTING_CONTAINER" ]; then
              sudo docker stop $EXISTING_CONTAINER
              sudo docker rm $EXISTING_CONTAINER
            fi
            sudo docker run -d \
              --name littlepet-container \
              -p 8080:8080 \
              --net ${{ secrets.DOCKER_NETWORK }} \
              -e TZ=Asia/Seoul \
              ${{ secrets.DOCKER_USERNAME }}/littlepetdocker:latest

            # Nginx 컨테이너 업데이트
            sudo docker build -t nginx-container -f Dockerfile.nginx .
            EXISTING_NGINX=$(sudo docker ps -q --filter "name=nginx-proxy")
            if [ ! -z "$EXISTING_NGINX" ]; then
              sudo docker stop $EXISTING_NGINX
              sudo docker rm $EXISTING_NGINX
            fi
            sudo docker run -d \
              --name nginx-proxy \
              -p 80:80 -p 443:443 \
              --net ${{ secrets.DOCKER_NETWORK }} \
              nginx-container

            # 사용하지 않는 이미지 제거
            sudo docker image prune -a -f