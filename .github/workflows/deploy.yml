name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test
        shell: bash

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}


        # 6) Docker 이미지 빌드 & Push
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          # 백엔드 소스가 있는 폴더 경로 (예: ./Backend)
          context: ./Backend
          # 해당 폴더에 있는 Dockerfile (필요 시 수정)
          file: Dockerfile
          push: true
          # 여기서 이미지 이름과 태그를 지정
          tags: ${{ secrets.DOCKER_USERNAME }}/littlepet_backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/littlepet_backend:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/littlepet_backend:cache,mode=max




      - name: Update Code & Restart Docker on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            
            cd /home/ubuntu  # ✅ 다시 루트로 이동 (docker-compose 실행)

            # 기존 컨테이너 중지 및 삭제
            docker-compose stop spring-boot-app

            # 기존 이미지 삭제
            docker rmi -f $(docker images seojaejun/littlepet_backend:latest -q) || true

            # 최신 Docker Compose 설정 적용
            docker-compose pull spring-boot-app
            docker-compose up -d spring-boot-app