name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 빌드
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test
        shell: bash

      # 5. DockerHub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 6. Docker Buildx 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.1

      # 7. Docker 이미지 빌드 및 푸시
      - name: Docker Image Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/littlepetdocker:latest

      # 8. EC2 서버에서 최신 코드 가져오기 및 네트워크 설정
      - name: Update Code & Set Network
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/Backend

            # 🔹 최신 코드 가져오기
            git reset --hard  # 기존 변경 사항 초기화
            git pull origin main  # 최신 코드 가져오기

            # 🔹 Docker 네트워크 생성 (이미 존재하면 생성 안 함)
            if [ -z "$(sudo docker network ls --filter name=backend_my-network -q)" ]; then
              sudo docker network create backend_my-network
            fi

      # 9. EC2 서버에서 Docker Compose 실행 (이 단계가 핵심!)
      - name: Restart with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/Backend

            # 🔹 기존 컨테이너 중지 및 삭제
            docker-compose down


           # 🔹 기존 이미지 삭제 (캐시 문제 방지)
            docker rmi -f $(docker images seojaejun/littlepetdocker -q)
            
            docker pull seojaejun/littlepetdocker:latest
            
            # 🔹 사용하지 않는 네트워크 삭제
            docker network prune -f
          

            # 🔹 Docker Compose 실행 (컨테이너 전체 재배포)
            docker-compose up -d --build